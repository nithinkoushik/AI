import random

N = 4

def calculate_cost(state):
    attacking_pairs = 0
    for i in range(N):
        for j in range(i + 1, N):
            if state[i] == state[j] or abs(state[i] - state[j]) == abs(i - j):
                attacking_pairs += 1
    return attacking_pairs

def get_neighbours(state):
    neighbours = []
    for i in range(N):
        for j in range(N):
            if j != state[i]:  # Swap only if it's a different position
                new_state = state[:]
                new_state[i] = j
                neighbours.append(new_state)
    return neighbours

def print_board(state):
    board = [["." for _ in range(N)] for _ in range(N)]
    for i in range(N):
        board[i][state[i]] = "Q"
    for row in board:
        print(" ".join(row))
    print()

def hill_climbing(initial_state):
    current_state = initial_state
    current_cost = calculate_cost(current_state)

    iteration = 0
    while True:
        print(f"\nIteration {iteration}")
        print(f"Current State: {current_state}, Cost: {current_cost}")

        neighbours = get_neighbours(current_state)
        next_state = current_state
        next_cost = current_cost

        for neighbour in neighbours:
            cost = calculate_cost(neighbour)
            print(f"Neighbour: {neighbour}, Cost: {cost}")
            if cost < next_cost:
                next_state = neighbour
                next_cost = cost

        if next_cost == current_cost:
            break  # Local optimum reached
        else:
            current_state, current_cost = next_state, next_cost

        if current_cost == 0:
            break

        iteration += 1

    return current_state, current_cost

# Input with validation
while True:
    try:
        initial_state = list(map(int, input("Enter initial state as 4 space-separated integers (0 to 3): ").split()))
        if len(initial_state) != N or any(x < 0 or x >= N for x in initial_state):
            raise ValueError("Invalid input. Please enter exactly 4 integers from 0 to 3.")
        break
    except ValueError as e:
        print(e)

solution_state, solution_cost = hill_climbing(initial_state)

print("\nFinal Results")
print("Initial State:", initial_state)
print("Final State (Solution):", solution_state)
print("Final Cost (Attacking Pairs):", solution_cost)

if solution_cost == 0:
    print("Solution found!")
else:
    print("Local optimum reached, but no solution.")

print("\nFinal Board Representation:")
print_board(solution_state)

     
Enter initial state as 4 space-separated integers (0 to 3): 0 0 0 0

Iteration 0
Current State: [0, 0, 0, 0], Cost: 6
Neighbour: [1, 0, 0, 0], Cost: 4
Neighbour: [2, 0, 0, 0], Cost: 4
Neighbour: [3, 0, 0, 0], Cost: 4
Neighbour: [0, 1, 0, 0], Cost: 5
Neighbour: [0, 2, 0, 0], Cost: 4
Neighbour: [0, 3, 0, 0], Cost: 3
Neighbour: [0, 0, 1, 0], Cost: 5
Neighbour: [0, 0, 2, 0], Cost: 4
Neighbour: [0, 0, 3, 0], Cost: 3
Neighbour: [0, 0, 0, 1], Cost: 4
Neighbour: [0, 0, 0, 2], Cost: 4
Neighbour: [0, 0, 0, 3], Cost: 4

Iteration 1
Current State: [0, 3, 0, 0], Cost: 3
Neighbour: [1, 3, 0, 0], Cost: 1
Neighbour: [2, 3, 0, 0], Cost: 3
Neighbour: [3, 3, 0, 0], Cost: 3
Neighbour: [0, 0, 0, 0], Cost: 6
Neighbour: [0, 1, 0, 0], Cost: 5
Neighbour: [0, 2, 0, 0], Cost: 4
Neighbour: [0, 3, 1, 0], Cost: 2
Neighbour: [0, 3, 2, 0], Cost: 3
Neighbour: [0, 3, 3, 0], Cost: 2
Neighbour: [0, 3, 0, 1], Cost: 3
Neighbour: [0, 3, 0, 2], Cost: 1
Neighbour: [0, 3, 0, 3], Cost: 3

Iteration 2
Current State: [1, 3, 0, 0], Cost: 1
Neighbour: [0, 3, 0, 0], Cost: 3
Neighbour: [2, 3, 0, 0], Cost: 3
Neighbour: [3, 3, 0, 0], Cost: 3
Neighbour: [1, 0, 0, 0], Cost: 4
Neighbour: [1, 1, 0, 0], Cost: 3
Neighbour: [1, 2, 0, 0], Cost: 3
Neighbour: [1, 3, 1, 0], Cost: 2
Neighbour: [1, 3, 2, 0], Cost: 1
Neighbour: [1, 3, 3, 0], Cost: 2
Neighbour: [1, 3, 0, 1], Cost: 3
Neighbour: [1, 3, 0, 2], Cost: 0
Neighbour: [1, 3, 0, 3], Cost: 1

Final Results
Initial State: [0, 0, 0, 0]
Final State (Solution): [1, 3, 0, 2]
Final Cost (Attacking Pairs): 0
Solution found!

Final Board Representation:
. Q . .
. . . Q
Q . . .
. . Q .
