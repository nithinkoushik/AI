class Node:
    def __init__(self, value=None, children=None):
        self.value = value
        self.children = children if children else []


def alpha_beta_pruning(node, depth, alpha, beta, maximizing_player):
    """
    Perform Alpha-Beta pruning and return the best value for the MAX node.
    Also logs the pruning and final values.
    """
    if not node.children or depth == 0:
        return node.value

    if maximizing_player:
        max_eval = float('-inf')
        for child in node.children:
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, False)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                print(f"Pruned at MAX node with alpha={alpha}, beta={beta}")
                break
        node.value = max_eval
        return max_eval
    else:
        min_eval = float('inf')
        for child in node.children:
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, True)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                print(f"Pruned at MIN node with alpha={alpha}, beta={beta}")
                break
        node.value = min_eval
        return min_eval


def print_tree(node, level=0):
    """Print the game tree with the node values."""
    print("  " * level + f"Node Value: {node.value}")
    for child in node.children:
        print_tree(child, level + 1)


if __name__ == "__main__":
    # Build the game tree from the question
    tree = Node(None, [
        Node(None, [
            Node(None,[Node(10),Node(9)]),
            Node(None, [
                Node(14),
                Node(18)
            ])
        ]),
        Node(None, [
            Node(None, [
                Node(5),
                Node(4)
            ]),
            Node(None, [
                Node(50),
                Node(3)
            ])
        ])
    ])

    print("Game Tree Before Alpha-Beta Pruning:")
    print_tree(tree)

    final_value = alpha_beta_pruning(tree, depth=3, alpha=float('-inf'), beta=float('inf'), maximizing_player=True)

    print("\nGame Tree After Alpha-Beta Pruning:")
    print_tree(tree)

    print("\nFinal Value at MAX node:", final_value)

     
Game Tree Before Alpha-Beta Pruning:
Node Value: None
  Node Value: None
    Node Value: None
      Node Value: 10
      Node Value: 9
    Node Value: None
      Node Value: 14
      Node Value: 18
  Node Value: None
    Node Value: None
      Node Value: 5
      Node Value: 4
    Node Value: None
      Node Value: 50
      Node Value: 3
Pruned at MAX node with alpha=14, beta=10
Pruned at MIN node with alpha=10, beta=5

Game Tree After Alpha-Beta Pruning:
Node Value: 10
  Node Value: 10
    Node Value: 10
      Node Value: 10
      Node Value: 9
    Node Value: 14
      Node Value: 14
      Node Value: 18
  Node Value: 5
    Node Value: 5
      Node Value: 5
      Node Value: 4
    Node Value: None
      Node Value: 50
      Node Value: 3

Final Value at MAX node: 10
